/*
Copyright Â© 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controller

import (
	"context"
	"fmt"
	"os"

	"github.com/hashicorp/go-tfe"
	"github.com/spf13/cobra"
	"gitlab.aws.dev/devops-aws/terraform-ce-cli/cobra/aid"
	"gitlab.aws.dev/devops-aws/terraform-ce-cli/cobra/dao"
	"gitlab.aws.dev/devops-aws/terraform-ce-cli/helper"
)

var COMMAND_LC_ValidArgs = []string{"list", "create", "read", "update", "delete"}

// COMMAND_UC_Cmd command to display tecli current version
func COMMAND_UC_Cmd() *cobra.Command {
	man, err := helper.GetManualV2("COMMAND_LC_", COMMAND_LC_ValidArgs)
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}

	cmd := &cobra.Command{
		Use:       man.Use,
		Short:     man.Short,
		Long:      man.Long,
		Example:   man.Example,
		ValidArgs: COMMAND_LC_ValidArgs,
		Args:      cobra.OnlyValidArgs,
		PreRunE:   COMMAND_LC_PreRun,
		RunE:      COMMAND_LC_Run,
	}

	usage := ``
	cmd.Flags().String("", "", usage)

	return cmd
}

func COMMAND_LC_PreRun(cmd *cobra.Command, args []string) error {
	if err := helper.ValidateCmdArgs(cmd, args, "COMMAND_LC_"); err != nil {
		return err
	}

	fArg := args[0]
	switch fArg {
	case "create", "read", "list", "delete":
		if err := helper.ValidateCmdArgAndFlag(cmd, args, "COMMAND_LC_", fArg, "organization"); err != nil {
			return err
		}

		if err := helper.ValidateCmdArgAndFlag(cmd, args, "COMMAND_LC_", fArg, "name"); err != nil {
			return err
		}
	}

	return nil
}

func COMMAND_LC_Run(cmd *cobra.Command, args []string) error {

	token := dao.GetTeamToken(profile)
	client := aid.GetTFEClient(token)

	fArg := args[0]
	switch fArg {
	case "list":
		list, err := COMMAND_LC_List(client)
		if err == nil {
			if len(list.Items) > 0 {
				for _, item := range list.Items {
					fmt.Printf("%v,\n", aid.ToJSON(item))
				}
			} else {
				return fmt.Errorf("no COMMAND_LC_ was found")
			}
		}
	case "create":
		options := aid.GetCOMMAND_UC_CreateOptions(cmd)
		COMMAND_LC_, err = COMMAND_LC_Create(client, options)

		if err == nil && COMMAND_LC_.ID != "" {
			fmt.Println(aid.ToJSON(COMMAND_LC_))
		}
	case "read":
		name, err := cmd.Flags().GetString("name")
		if err != nil {
			return err
		}

		COMMAND_LC_, err := COMMAND_LC_Read(client, name)
		if err == nil {
			fmt.Println(aid.ToJSON(COMMAND_LC_))
		} else {
			return fmt.Errorf("COMMAND_LC_ %s not found\n%v", name, err)
		}
	case "update":
		name, err := cmd.Flags().GetString("name")
		if err != nil {
			return err
		}

		options := aid.GetCOMMAND_UC_UpdateOptions(cmd)
		COMMAND_LC_, err = COMMAND_LC_Update(client, name, options)
		if err == nil && COMMAND_LC_.ID != "" {
			fmt.Println(aid.ToJSON(COMMAND_LC_))
		} else {
			return fmt.Errorf("unable to update COMMAND_LC_\n%v", err)
		}
	case "delete":
		name, err := cmd.Flags().GetString("name")
		if err != nil {
			return err
		}

		err = COMMAND_LC_Delete(client, name)
		if err == nil {
			fmt.Printf("COMMAND_LC_ %s deleted successfully\n", name)
		} else {
			return fmt.Errorf("unable to delete COMMAND_LC_ %s\n%v", name, err)
		}
	}

	return nil
}

func COMMAND_LC_List(client *tfe.Client) (*tfe.COMMAND_UC_List, error) {
	return client.COMMAND_UC_.List(context.Background(), organization, tfe.COMMAND_UC_ListOptions{})
}

// Create is used to create a new COMMAND_LC_.
func COMMAND_LC_Create(client *tfe.Client, options tfe.COMMAND_UC_CreateOptions) (*tfe.COMMAND_UC_, error) {
	return client.COMMAND_UC_.Create(context.Background(), organization, options)
}

// Read a COMMAND_LC_ by its name.
func COMMAND_LC_Read(client *tfe.Client, COMMAND_LC_ string) (*tfe.COMMAND_UC_, error) {
	return client.COMMAND_UC_.Read(context.Background(), organization, COMMAND_LC_)
}

// Update settings of an existing COMMAND_LC_.
func COMMAND_LC_Update(client *tfe.Client, COMMAND_LC_ string, options tfe.COMMAND_UC_UpdateOptions) (*tfe.COMMAND_UC_, error) {
	return client.COMMAND_UC_.Update(context.Background(), organization, COMMAND_LC_, options)
}

// // Delete a COMMAND_LC_ by its name.
func COMMAND_LC_Delete(client *tfe.Client, COMMAND_LC_ string) error {
	return client.COMMAND_UC_.Delete(context.Background(), organization, COMMAND_LC_)
}
