# This file is a template, and might need editing before it works on your project.
image: golang:latest

variables:
  # Please edit to your GitLab project
  REPO_NAME: gitlab.aws.dev/devops-aws/tecli

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
before_script:
  - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
  - ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
  - cd $GOPATH/src/$REPO_NAME

stages:
  - build
  - release

compile:
  stage: build
  script:
    - go build -race -ldflags "-extldflags '-static'" -o $CI_PROJECT_DIR/tecli
  artifacts:
    paths:
      - tecli

release:
  only:
    refs:
      - master
      - tags
  stage: release
  script:
    - mkdir -p dist
    - GOOS=darwin GOARCH=amd64 go build -o dist/tecli-darwin-amd64 main.go
	  - GOOS=solaris GOARCH=amd64 go build -o dist/tecli-solaris-amd64 main.go
	  - GOOS=freebsd GOARCH=386 go build -o dist/tecli-freebsd-386 main.go
	  - GOOS=freebsd GOARCH=amd64 go build -o dist/tecli-freebsd-amd64 main.go
	  - GOOS=freebsd GOARCH=arm go build -o dist/tecli-freebsd-arm main.go
	  - GOOS=openbsd GOARCH=386 go build -o dist/tecli-openbsd-386 main.go
	  - GOOS=openbsd GOARCH=amd64 go build -o dist/tecli-openbsd-amd64 main.go
	  - GOOS=openbsd GOARCH=arm go build -o dist/tecli-openbsd-arm main.go
	  - GOOS=linux GOARCH=386 go build -o dist/tecli-linux-386 main.go
	  - GOOS=linux GOARCH=amd64 go build -o dist/tecli-linux-amd64 main.go
	  - GOOS=linux GOARCH=arm go build -o dist/tecli-linux-arm main.go
	  - GOOS=windows GOARCH=386 go build -o dist/tecli-windows-386 main.go
	  - GOOS=windows GOARCH=amd64 go build -o dist/tecli-windows-amd64 main.go
  artifacts:
    paths:
      - dist/tecli-*
